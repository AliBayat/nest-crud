"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RMQTestService = void 0;
const common_1 = require("@nestjs/common");
const _1 = require(".");
const constants_1 = require("./constants");
const logger_1 = require("./helpers/logger");
const rmq_metadata_accessor_1 = require("./rmq-metadata.accessor");
const router_emmiter_1 = require("./emmiters/router.emmiter");
const option_validator_1 = require("./option.validator");
const get_uniq_id_1 = require("./utils/get-uniq-id");
let RMQTestService = class RMQTestService {
    constructor(options, metadataAccessor) {
        this.metadataAccessor = metadataAccessor;
        this.isInitialized = false;
        this.replyStack = new Map();
        this.mockStack = new Map();
        this.mockErrorStack = new Map();
        this.options = options;
        this.logger = options.logger ? options.logger : new logger_1.RQMColorLogger(this.options.logMessages);
        (0, option_validator_1.validateOptions)(this.options, this.logger);
    }
    onModuleInit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.init();
            this.isInitialized = true;
        });
    }
    mockReply(topic, reply) {
        this.mockStack.set(topic, reply);
    }
    mockError(topic, error) {
        this.mockErrorStack.set(topic, error);
    }
    triggerRoute(path, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                const correlationId = (0, get_uniq_id_1.getUniqId)();
                let msg = {
                    content: Buffer.from(JSON.stringify(data)),
                    fields: {
                        deliveryTag: 1,
                        redelivered: false,
                        exchange: 'mock',
                        routingKey: path,
                    },
                    properties: {
                        messageId: 1,
                        timestamp: new Date(),
                        appId: this.options.serviceName,
                        clusterId: 1,
                        userId: 1,
                        type: '',
                        contentType: JSON,
                        contentEncoding: undefined,
                        headers: [],
                        deliveryMode: '',
                        priority: 0,
                        correlationId,
                        expiration: 0,
                        replyTo: 'mock',
                    },
                };
                const route = this.getRouteByTopic(path);
                if (route) {
                    msg = yield this.useMiddleware(msg);
                    this.replyStack.set(correlationId, { resolve, reject });
                    router_emmiter_1.requestEmitter.emit(route, msg);
                }
                else {
                    throw new _1.RMQError(constants_1.ERROR_NO_ROUTE, constants_1.ERROR_TYPE.TRANSPORT);
                }
            }));
        });
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            this.bindRMQRoutes();
            this.logConnected();
            this.attachEmitters();
        });
    }
    ack(...params) { }
    nack(...params) { }
    send(topic, message, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const error = this.mockErrorStack.get(topic);
            if (error) {
                throw error;
            }
            return this.mockStack.get(topic);
        });
    }
    notify(topic, message, options) {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    healthCheck() {
        return true;
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            router_emmiter_1.responseEmitter.removeAllListeners();
        });
    }
    attachEmitters() {
        router_emmiter_1.responseEmitter.on(router_emmiter_1.ResponseEmitterResult.success, (msg, result) => __awaiter(this, void 0, void 0, function* () {
            const { resolve } = this.replyStack.get(msg.properties.correlationId);
            result = yield this.intercept(result, msg);
            resolve(result);
        }));
        router_emmiter_1.responseEmitter.on(router_emmiter_1.ResponseEmitterResult.error, (msg, err) => __awaiter(this, void 0, void 0, function* () {
            const { reject } = this.replyStack.get(msg.properties.correlationId);
            yield this.intercept('', msg, err);
            reject(err);
        }));
        router_emmiter_1.responseEmitter.on(router_emmiter_1.ResponseEmitterResult.ack, (msg) => __awaiter(this, void 0, void 0, function* () {
            this.ack(msg);
        }));
    }
    intercept(res, msg, error) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.options.intercepters || this.options.intercepters.length === 0) {
                return res;
            }
            for (const intercepter of this.options.intercepters) {
                res = yield new intercepter(this.logger).intercept(res, msg, error);
            }
            return res;
        });
    }
    bindRMQRoutes() {
        return __awaiter(this, void 0, void 0, function* () {
            this.routes = this.metadataAccessor.getAllRMQPaths();
            if (this.routes.length > 0) {
                this.routes.map((r) => __awaiter(this, void 0, void 0, function* () {
                    this.logger.log(`Mapped ${r}`, 'RMQRoute');
                }));
            }
        });
    }
    useMiddleware(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.options.middleware || this.options.middleware.length === 0) {
                return msg;
            }
            for (const middleware of this.options.middleware) {
                msg = yield new middleware(this.logger).transform(msg);
            }
            return msg;
        });
    }
    getRouteByTopic(topic) {
        return this.routes.find((route) => {
            if (route === topic) {
                return true;
            }
            const regexString = '^' + route.replace(/\*/g, '([^.]+)').replace(/#/g, '([^.]+.?)+') + '$';
            return topic.search(regexString) !== -1;
        });
    }
    logConnected() {
        this.logger.log(constants_1.CONNECTED_MESSAGE, 'RMQModule');
    }
};
exports.RMQTestService = RMQTestService;
exports.RMQTestService = RMQTestService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, common_1.Inject)(constants_1.RMQ_MODULE_OPTIONS)),
    __metadata("design:paramtypes", [Object, rmq_metadata_accessor_1.RMQMetadataAccessor])
], RMQTestService);
