import { OnModuleInit } from '@nestjs/common';
import { Channel } from 'amqplib';
import { IRMQServiceOptions } from './interfaces/rmq-options.interface';
import { IPublishOptions } from './interfaces/rmq-publish-options.interface';
import { RMQMetadataAccessor } from './rmq-metadata.accessor';
import { RmqErrorService } from './rmq-error.service';
import { IRMQService } from './interfaces/rmq-service.interface';
export declare class RMQService implements OnModuleInit, IRMQService {
    private readonly metadataAccessor;
    private readonly errorService;
    private server;
    private clientChannel;
    private subscriptionChannel;
    private options;
    private sendResponseEmitter;
    private replyQueue;
    private routes;
    private logger;
    private isConnected;
    private isInitialized;
    constructor(options: IRMQServiceOptions, metadataAccessor: RMQMetadataAccessor, errorService: RmqErrorService);
    onModuleInit(): Promise<void>;
    init(): Promise<void>;
    ack(...params: Parameters<Channel['ack']>): ReturnType<Channel['ack']>;
    nack(...params: Parameters<Channel['nack']>): ReturnType<Channel['nack']>;
    send<IMessage, IReply>(topic: string, message: IMessage, options?: IPublishOptions): Promise<IReply>;
    notify<IMessage>(topic: string, message: IMessage, options?: IPublishOptions): Promise<void>;
    healthCheck(): boolean;
    disconnect(): Promise<void>;
    private createConnectionUri;
    private createSubscriptionChannel;
    private createClientChannel;
    private listen;
    private bindRMQRoutes;
    private detachEmitters;
    private attachEmitters;
    private reply;
    private getRouteByTopic;
    private useMiddleware;
    private intercept;
    private initializationCheck;
    private logConnected;
}
