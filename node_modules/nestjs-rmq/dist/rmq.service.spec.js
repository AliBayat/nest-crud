"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const rmq_service_1 = require("./rmq.service");
const rmq_metadata_accessor_1 = require("./rmq-metadata.accessor");
const core_1 = require("@nestjs/core");
const rmq_error_service_1 = require("./rmq-error.service");
describe('RMQService', () => {
    let rmqService;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        const accessor = new rmq_metadata_accessor_1.RMQMetadataAccessor(new core_1.Reflector());
        const errorService = new rmq_error_service_1.RmqErrorService({
            exchangeName: 'test',
            connections: [],
        });
        rmqService = new rmq_service_1.RMQService({
            exchangeName: 'test',
            serviceName: '',
            connections: [],
        }, accessor, errorService);
        rmqService['routes'] = ['exect.match.rpc', '*.*.star', '#.hash', 'pattent.#'];
    }));
    describe('Test regex', () => {
        it('Matching', () => __awaiter(void 0, void 0, void 0, function* () {
            const res = rmqService['getRouteByTopic']('exect.match.rpc');
            expect(res).toBe(rmqService['routes'][0]);
        }));
        it('Pattern * - success', () => __awaiter(void 0, void 0, void 0, function* () {
            const res = rmqService['getRouteByTopic']('oh.thisis.star');
            expect(res).toBe(rmqService['routes'][1]);
        }));
        it('Pattern * - fail', () => __awaiter(void 0, void 0, void 0, function* () {
            const res = rmqService['getRouteByTopic']('oh.this.is.star');
            expect(res).toBe(undefined);
        }));
        it('Pattern # - success start', () => __awaiter(void 0, void 0, void 0, function* () {
            const res = rmqService['getRouteByTopic']('this.is.real.hash');
            expect(res).toBe(rmqService['routes'][2]);
        }));
        it('Pattern # - success end', () => __awaiter(void 0, void 0, void 0, function* () {
            const res = rmqService['getRouteByTopic']('pattent.topic');
            expect(res).toBe(rmqService['routes'][3]);
        }));
        it('Pattern # - fail', () => __awaiter(void 0, void 0, void 0, function* () {
            const res = rmqService['getRouteByTopic']('this.pattent.topic');
            expect(res).toBe(undefined);
        }));
    });
});
